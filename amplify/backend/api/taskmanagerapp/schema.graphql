type User @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin"] },
  { allow: private, operations: [create, read, update, delete] }
]) {
  id: ID!
  fullName: String!
  email: AWSEmail!
  profilePicture: String
  preferredTimezone: String
  unitOfMeasurement: UnitOfMeasurement
  tasks: [Task] @hasMany(indexName: "byUser", fields: ["id"])
}

type Task @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin"] },
  { allow: private, operations: [create, read, update, delete] }
]) {
  id: ID
  title: String!
  date: AWSDate!
  startTime: AWSDateTime!
  endTime: AWSDateTime!
  location: String!
  latitude: Float
  longitude: Float
  placeId: String
  type: TaskType!
  cost: Float
  notes: String
  voiceNotes: [VoiceNote] @hasMany(indexName: "byTask", fields: ["id"])
  checklist: [ChecklistItem] @hasMany(indexName: "byTask", fields: ["id"])
  attachments: [Attachment] @hasMany(indexName: "byTask", fields: ["id"])
  status: TaskStatus!
  user: User @belongsTo(fields: ["userId"])
  userId: ID! @index(name: "byUser", sortKeyFields: ["id"])
}

type VoiceNote @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin"] },
  { allow: private, operations: [create, read, update, delete] }
]) {
  id: ID
  task: Task @belongsTo(fields: ["taskId"])
  taskId: ID! @index(name: "byTask", sortKeyFields: ["id"])
  fileUrl: String!
}

type ChecklistItem @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin"] },
  { allow: private, operations: [create, read, update, delete] }
]) {
  id: ID
  task: Task @belongsTo(fields: ["taskId"])
  taskId: ID! @index(name: "byTask", sortKeyFields: ["id"])
  description: String!
  isCompleted: Boolean!
}

type Attachment @model @auth(rules: [
  { allow: owner },
  { allow: groups, groups: ["Admin"] },
  { allow: private, operations: [create, read, update, delete] }
]) {
  id: ID
  task: Task @belongsTo(fields: ["taskId"])
  taskId: ID! @index(name: "byTask", sortKeyFields: ["id"])
  filePath: String
  fileType: String!
}

enum TaskType {
  PROFESSIONAL
  PERSONAL
}

enum TaskStatus {   # New enum for task completion status
  COMPLETE
  INCOMPLETE
}

enum UnitOfMeasurement {
  IMPERIAL
  METRIC
}